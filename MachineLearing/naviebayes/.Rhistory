file.choose()
library(MASS)
library(klaR)
library(pROC)
list.files()
mydata<-read.csv("mushrooms.csv")
View(mydata)
dir()
str()
ls()#当前空间内的文件
str(mydata)
head(mydata)
head(mydata)
summary(mydata)
set.seed(1)
nrow(mydata)
sample(10)
sample(10,size=2)
sample(10,size=2)
sample(10,size=2)
set.seed(1)
sample(10,size=2)
set.seed(1)
sample(10,size=2)
set.seed(10000000)
sample(10,size=2)
set.seed(10000000)
sample(10,size=2)
set.seed(10000000)
sample(10,size=2)
sample(10,size=2)
sample(10,size=2)
set.seed(1)
row=sample(1:n,size = 0.75%*n)#抽样
summary(mydata)#概述
n=nrow(mydata)#样本量
set.seed(1)
row=sample(1:n,size = 0.75%*n)#抽样
row=sample(1:n,size = 0.75*n)#抽样
head(row)
prop.table(table(mydata$type))
table(mydata$type)
prop.table(table(mydata$type))
prop.table(table(train$type))#蘑菇是否有毒train data
row<-sample(1:n,size = 0.75*n)#抽样
train<-mydata[row,]#训练数据占75%
test<-mydata[-row,]#测试数据占25%
prop.table(table(mydata$type))#蘑菇是否有毒总体概率
prop.table(table(train$type))#蘑菇是否有毒train data
prop.table(table(mydata$type))#蘑菇是否有毒总体概率
prop.table(table(train$type))#蘑菇是否有毒train data
prop.table(table(test$type))#蘑菇是否有毒test data
rfeControl(functions = rfFuncs,method = 'cv',repeats = 5)
?rfeControl
??rfeControl
library(caret)
install.packages("caret")
library(caret)
library(ggplot2)
library(lattice)
library(caret)
rfeControl(functions = rfFuncs,method = 'cv',repeats = 5)
rfeControls_rf <-rfeControl(functions = rfFuncs,method = 'cv',repeats = 5)
summary(rfeControls_rf)
summary(rfeControls_rf)
fs_nb <- rfe(x = train[,-1],
y = train[,1],
sizes = seq(4,21,2),
rfeControl = rfeControls_rf)
library(e1071)
install.packages("e1071")
library(e1071)
fs_nb <- rfe(x = train[,-1],
y = train[,1],
sizes = seq(4,21,2),
rfeControl = rfeControls_rf)
install.packages("randomForest")
library(randomForest)
library(randomForest)
fs_nb <- rfe(x = train[,-1],
y = train[,1],
sizes = seq(4,21,2),
rfeControl = rfeControls_rf)
fs_nb <- rfe(x = train[,-1],
y = train[,1],
sizes = seq(4,21,2),
rfeControl = rfeControls_rf)
seq(4,21,2)
seq(4,21,by=2)
rfeControl = rfeControls_rf
rfeControls_rf <-rfeControl(functions = rfFuncs,method = 'cv',repeats = 5)
summary(rfeControls_rf)
fs_nb <- rfe(x = train[,-1],y = train[,1],sizes = seq(4,21,by=2),rfeControl = rfeControls_rf)
if(!suppressWarnings(require('klaR'))){
install.packages('klaR')
require('klaR')
}
if(!suppressWarnings(require('pROC'))){
install.packages('pROC')
require('pROC')
}
mydata <- read.csv(file = file.choose())
str(mydata)
summary(mydata)
set.seed(12)
index <- sample(1:nrow(mydata), size = 0.75*nrow(mydata))
train <- mydata[index,]
test <- mydata[-index,]
prop.table(table(mydata$type))
prop.table(table(train$type))
prop.table(table(test$type))
rfeControls_rf <- rfeControl(
functions = rfFuncs,
method = 'cv',
repeats = 5)
fs_nb <- rfe(x = train[,-1],
y = train[,1],
sizes = seq(4,21,2),
rfeControl = rfeControls_rf)
fs_nb
plot(fs_nb, type = c('g','o'))
fs_nb$optVariables
type(fs_nb)
class(fs_nb)
fs_nb$variables
plot(fs_nb, type = c('g','o'))
fs_nb$optVariables
c('type',fs_nb$optVariables)
various<-c('type',fs_nb$optVariables)
?NavieBBayes
?NavieBBayes
??NavieBBayes
fit <- NaiveBayes(type ~ ., data = train[,vars])#建立贝叶斯模型，type ~., train data
install.packages('NavieBayes')
?naiveBayes
head(train[,various]
head(train[,various]
)
head(train[,various])
fit<-NaiveBayes(type~.,data=train[,various])
fit
fit<-NaiveBayes(type~.,data=train[,various])
fit
test[,various][,-1]
head(test[,various][,-1])
head(test[,various])
pre<-predict(fit,newdata = test[,verious][,-1])
pre<-predict(fit,newdata = test[,verious][,-1])
test[,verious][,-1]
various<-c('type',fs_nb$optVariables)
fit<-NaiveBayes(type~.,data=train[,various])
fit
pre<-predict(fit,newdata = test[,verious][,-1])
pre<-predict(fit,newdata = test[,various][,-1])
head(pre)
pre<-predict(fit,newdata = test[,various][,-1])
head(pre)
class(pre)
head(pre$class)
head(pre$class)#模型预测结果
pre$class
head(pre$class)#模型预测结果
test[,1]
head(test[,1])#观测值
table(model,obs)
model<-head(pre$class)#模型预测结果
obs<-head(test[,1])#观测值
table(model,obs)
freq<-table(model,obs)
freq
model
summarise(model)
summary(model)
pre<-predict(fit,newdata = test[,various][,-1])
head(pre)
summary(pre)
model<-head(pre$class)#模型预测结果
summary(model)
summary(obs)
accuracy <- sum(diag(freq))/sum(freq)
accuracy
sum(freq)
freq
diag(freq)
diag(2)
A=[1,2,3;1,2,3;1,2,3]
A=(1,2,3;1,2,3;1,2,3)
A=(1 2 3,1 2 3,1 2 3)
matrix(1,2,3;1,2,3)
matrix(3,3)
matrix(1:9,3)
a=matrix(1:9,3)
a
diag(a)
as.integer(test[,1])
a=[T,F,T,F,T,T,T,T]
a=c(T,F,T,F,T,T,T,T)
a
as.integer(a)
as.integer(factor(pred$class)
）
)
as.integer(factor(pred$class))
as.integer(factor(pre$class))
modelroc <- roc(as.integer(test[,1]),
as.integer(factor(pre$class)))
modelroc
plot(modelroc)
plot(modelroc, print.auc = TRUE, auc.polygon = TRUE,
grid = c(0.1,0.2), grid.col = c('green','red'),
max.auc.polygon = TRUE, auc.polygon.col = 'steelblue')
